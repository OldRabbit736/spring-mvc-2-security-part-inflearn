세션
- 서버에 중요한 정보를 보관하고 연결을 유지하는 방법을 세션이라고 한다.

세션 동작 방식
- 세션 ID를 생성해야 하는데, 추정 불가능해야 한다.
- UUID를 주로 사용하는데 추정이 불가능하다.

세션 만들기
- 세션 생성
    - sessionId 생성 (임의의 추정 불가능한 랜덤 값)
    - 세션 저장소에 sessionId와 보관할 값 저장
    - sessionId로 응답 쿠키를 생성해서 클라이언트에 전달
- 세션 조회
    - 클라이언트가 요청한 sessionId 쿠키의 값으로 세션 저장소에 보관한 값 조회
- 세션 만료
    - 클라이언트가 요청한 sessionId 쿠키의 값으로 세션 저장소에 보관한 sessionId와 값 제거

서블릿 HTTP 세션
- 세션이라는 개념은 대부분의 웹 어플리케이션에 필요한 것이다. 어쩌면 웹이등장하면서 부터 나온 문제이다.
- 서블릿은 세션을 위해 HttpSession 이라는 기능을 제공하는데, 지금까지 나온 문제들을 해결해준다.

HttpSession
- 서블릿 컨테이너가 클라이언트(웹 브라우저)를 식별할 수 있는 식별자를 자동으로 제공해 주는데,
  이름은 JSESSIONID 이다.
- 이 값을 Set-Cookie를 통해 쿠키로서 클라이언트에 심는다.
- 추후 요청에 들어있는 JSESSIONID 쿠키를 통해 클라이언트를 식별할 수 있다.
- 하지만 이 JSESSIONID 쿠키는 자동으로 생성되지 않는다.
  HttpServletRequest를 통해 HttpSession을 생성하면 쿠키를 생성하게 된다.
  그러면 쿠키가 Set-Cookie를 통해 클라이언트에게 전달되고,
  클라이언트는 추후 요청에서 해당 쿠키를 포함하게 된다.
  (Set-Cookie: JSESSIONID=CAC349899D7067BE7AD7FA540104F22A; Path=/; HttpOnly)
- 그러면 서블릿 컨테이너는 자동으로 해당 JSESSIONID를 이용해
  연관된 HttpSession 객체를 HttpServletRequest에 세팅해 놓는다.
- 컨트롤러 등에서는 해당 HttpSession에서 attribute를 가져오거나 세팅할 수 있다.
- 로그아웃을 할 때 HttpSession을 invalid 하는 메서드를 호출하면 서버 내부에 관리되고 있던 해당 Session 기록을 삭제한다.
  클라이언트에는 따로 조치를 취하지 않는다.
- HttpSession 인터페이스 정의 파일에 적혀 있는 내용
    - Provides a way to identify a user across more than one page request
      or visit to a Web site and to store information about that user.
      The servlet container uses this interface to create a session between
      an HTTP client and an HTTP server.

- 세션 타임아웃 설정
    - 세션은 사용자가 로그아웃을 직접 호출해서 session.invalidate() 가 호출되는 경우에 삭제된다.
    - 그런데 대부분의 사용자는 로그아웃을 선택하지 않고, 그냥 웹 브라우저를 종료한다.
    - 문제는 HTTP 가 비 연결성(ConnectionLess)이므로 서버 입장에서는 해당 사용자가 웹 브라우저를 종료한 것인지 아닌지를
      인식할 수 없다.
    - 따라서 서버에서 세션 데이터를 언제 삭제해야 하는지 판단하기가 어렵다.
    - 이 경우 남아있는 세션을 무한정 보관하면 다음과 같은 문제가 발생할 수 있다.
        - 세션과 관련된 쿠키 JSESSIONID를 탈취 당했을 경우 오랜 시간이 지나도 해당 쿠키로 악의적인 요청을 할 수 있다.
        - 세션은 기본적으로 메모리에 생성된다. 메모리의 크기가 무한하지 않기 때문에 꼭 필요한 경우에만 생성해서 사용해야 한다.
          10만명의 사용자가 로그인하면 10만개의 세션이 생성되는 것이다.
    - 세션의 종료 시점
        - 사용자가 최근 서버에 요청한 시간을 기준으로 30분이 지나면 세션을 종료하게 하는 방법이 있다.
        - 사용자가 서비스를 사용할 때 마다 세션의 생존 기간이 30분으로 다시 되돌려진다.
        - HttpSession은 이 방식을 사용한다.
    - 세션 타임아웃 설정
        - 스프링 부트로 글로벌 설정
            - application.properties > server.servlet.session.timeout=60 (초 단위. 기본은 1800(30분))
            - 단, 글로벌 설정은 분 단위로 설정해야 한다. 60(1분), 120(2분), ...
        - 특정 세션 단위로 시간 설정
            - session.setMaxInactiveInterval(55); // 55초
        - LastAccessedTime 이후로 timeout 만큼 시간이 지나면, WAS가 내부에서 해당 세션을 제거한다.

- 정리
    - 서블릿의 HttpSession 이 제공하는 기능 덕분에 편리하게 세션 관리를 할 수 있다.
    - 주의할 점은, 세션에는 최소한의 데이터만 보관해야 한다는 것이다.
      보관한 데이터의 용량 * 사용자 수만큼 메모리 용량을 차지하게 되므로 자칫하면 장애르 이어지 수 있다.
    - 따라서 세션에 들어갈 데이터를 최소한으로(예를들어 Member 객체 전체 대신 Member ID만 이라던지,
      필요한 필드만 있는 세션 객체를 따로 정의해서 사용한다던지...) 유지하고,
      타임아웃으로 필요 없는 세션을 없애는 등, 최적화를 해야한다.
